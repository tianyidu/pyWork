import keras
from keras.models import Sequential,load_model
from keras.optimizers import adagrad
from keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Activation,Dropout
from keras.layers.advanced_activations import LeakyReLU
from keras.layers.normalization import BatchNormalization
from keras.losses import sparse_categorical_crossentropy
from keras.initializers import TruncatedNormal,VarianceScaling
from keras import regularizers
import Input

NUM_CLASS = 3
model = Sequential()

model.add(Conv2D(32,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv1_1",input_shape=(300,300,3)))
model.add(LeakyReLU())
model.add(Conv2D(32,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv1_2"))
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2),padding="SAME",name="pool1"))
model.add(BatchNormalization(axis=1))

model.add(Conv2D(48,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv2_1"))
model.add(LeakyReLU())
model.add(Conv2D(48,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv2_2"))
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2),padding="SAME",name="pool2"))
model.add(BatchNormalization(axis=1))

model.add(Conv2D(64,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv3_1"))
model.add(LeakyReLU())
model.add(Conv2D(64,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-2),kernel_regularizer=regularizers.l2(1e-4),name="conv3_2"))
model.add(LeakyReLU())
model.add(Conv2D(64,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv3_3"))
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2),padding="SAME",name="pool3"))
model.add(BatchNormalization(axis=1))

model.add(Conv2D(80,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv4_1"))
model.add(LeakyReLU())
model.add(Conv2D(80,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-2),kernel_regularizer=regularizers.l2(1e-4),name="conv4_2"))
model.add(LeakyReLU())
model.add(Conv2D(80,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv4_3"))
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2),padding="SAME",name="pool4"))
model.add(BatchNormalization(axis=1))

model.add(Conv2D(96,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-1),kernel_regularizer=regularizers.l2(1e-4),name="conv5_1"))
model.add(LeakyReLU())
model.add(Conv2D(96,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-2),kernel_regularizer=regularizers.l2(1e-4),name="conv5_2"))
model.add(LeakyReLU())
model.add(Conv2D(96,(3,3),padding="SAME",kernel_initializer=TruncatedNormal(stddev=1e-2),kernel_regularizer=regularizers.l2(1e-4),name="conv5_3"))
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2),padding="SAME",name="pool5"))
model.add(BatchNormalization(axis=1))

model.add(Flatten())
model.add(Dense(units=512,kernel_initializer=TruncatedNormal(stddev=1.0/512),name="local1"))
model.add(Activation("relu"))
model.add(BatchNormalization())
model.add(Dropout(0.5))

model.add(Dense(units=1000,kernel_initializer=TruncatedNormal(stddev=1e-3),name="local2"))
model.add(Activation("relu"))
model.add(BatchNormalization())
model.add(Dropout(0.4))

model.add(Dense(units=1000,kernel_initializer=TruncatedNormal(stddev=1e-3),name="local3"))
model.add(Activation("relu"))
model.add(BatchNormalization())
model.add(Dropout(0.4))

model.add(Dense(units=NUM_CLASS,kernel_initializer=TruncatedNormal(stddev=1e-1),name="local4"))
model.add(Activation("softmax"))

model.summary()
model.compile(loss="sparse_categorical_crossentropy",optimizer=adagrad(lr=0.001, decay=0.1),metrics=["acc"])

imgInput = Input.ImgInput(r"/root/pworkspace/lj_k3/data")

ckpt = keras.callbacks.ModelCheckpoint(filepath='../ckpt/weights.ckpt',mode='auto',monitor="acc",verbose=1,save_best_only=True)
model.fit_generator(generator=imgInput,epochs=100,steps_per_epoch=30,callbacks=[ckpt])


